// Mocks generated by Mockito 5.4.4 from annotations
// in auhentication_gql/test/helpers/test_helper.dart.
// Do not manually edit this file.

// ignore_for_file: no_leading_underscores_for_library_prefixes
import 'dart:async' as _i8;

import 'package:auhentication_gql/common/model/user.dart' as _i5;
import 'package:auhentication_gql/core/error/failure/failure.dart' as _i12;
import 'package:auhentication_gql/core/network/client/graphql_client.dart'
    as _i2;
import 'package:auhentication_gql/core/utils/helpers/token_manager.dart'
    as _i10;
import 'package:auhentication_gql/features/authentication/data/data_source/remote/auth_api_service.dart'
    as _i7;
import 'package:auhentication_gql/features/authentication/data/repository/authentication_repository.dart'
    as _i11;
import 'package:auhentication_gql/features/home/model/post.dart' as _i6;
import 'package:auhentication_gql/features/home/repository/home_repositiory.dart'
    as _i14;
import 'package:auhentication_gql/features/home/services/home_api_service.dart'
    as _i13;
import 'package:dartz/dartz.dart' as _i4;
import 'package:dio/dio.dart' as _i3;
import 'package:mockito/mockito.dart' as _i1;
import 'package:mockito/src/dummies.dart' as _i9;

// ignore_for_file: type=lint
// ignore_for_file: avoid_redundant_argument_values
// ignore_for_file: avoid_setters_without_getters
// ignore_for_file: comment_references
// ignore_for_file: deprecated_member_use
// ignore_for_file: deprecated_member_use_from_same_package
// ignore_for_file: implementation_imports
// ignore_for_file: invalid_use_of_visible_for_testing_member
// ignore_for_file: prefer_const_constructors
// ignore_for_file: unnecessary_parenthesis
// ignore_for_file: camel_case_types
// ignore_for_file: subtype_of_sealed_class

class _FakeGraphqlClient_0 extends _i1.SmartFake implements _i2.GraphqlClient {
  _FakeGraphqlClient_0(
    Object parent,
    Invocation parentInvocation,
  ) : super(
          parent,
          parentInvocation,
        );
}

class _FakeResponse_1<T> extends _i1.SmartFake implements _i3.Response<T> {
  _FakeResponse_1(
    Object parent,
    Invocation parentInvocation,
  ) : super(
          parent,
          parentInvocation,
        );
}

class _FakeEither_2<L, R> extends _i1.SmartFake implements _i4.Either<L, R> {
  _FakeEither_2(
    Object parent,
    Invocation parentInvocation,
  ) : super(
          parent,
          parentInvocation,
        );
}

class _FakeUser_3 extends _i1.SmartFake implements _i5.User {
  _FakeUser_3(
    Object parent,
    Invocation parentInvocation,
  ) : super(
          parent,
          parentInvocation,
        );
}

class _FakePost_4 extends _i1.SmartFake implements _i6.Post {
  _FakePost_4(
    Object parent,
    Invocation parentInvocation,
  ) : super(
          parent,
          parentInvocation,
        );
}

/// A class which mocks [UserApiService].
///
/// See the documentation for Mockito's code generation for more information.
class MockUserApiService extends _i1.Mock implements _i7.UserApiService {
  MockUserApiService() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i2.GraphqlClient get gqlClient => (super.noSuchMethod(
        Invocation.getter(#gqlClient),
        returnValue: _FakeGraphqlClient_0(
          this,
          Invocation.getter(#gqlClient),
        ),
      ) as _i2.GraphqlClient);

  @override
  _i8.Future<String> signInUser({
    required String? email,
    required String? password,
  }) =>
      (super.noSuchMethod(
        Invocation.method(
          #signInUser,
          [],
          {
            #email: email,
            #password: password,
          },
        ),
        returnValue: _i8.Future<String>.value(_i9.dummyValue<String>(
          this,
          Invocation.method(
            #signInUser,
            [],
            {
              #email: email,
              #password: password,
            },
          ),
        )),
      ) as _i8.Future<String>);

  @override
  _i8.Future<void> signUpUser({
    required String? email,
    required String? password,
  }) =>
      (super.noSuchMethod(
        Invocation.method(
          #signUpUser,
          [],
          {
            #email: email,
            #password: password,
          },
        ),
        returnValue: _i8.Future<void>.value(),
        returnValueForMissingStub: _i8.Future<void>.value(),
      ) as _i8.Future<void>);
}

/// A class which mocks [TokenManager].
///
/// See the documentation for Mockito's code generation for more information.
class MockTokenManager extends _i1.Mock implements _i10.TokenManager {
  MockTokenManager() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i8.Future<void> storeToken({
    String? refreshToken,
    String? accessToken,
  }) =>
      (super.noSuchMethod(
        Invocation.method(
          #storeToken,
          [],
          {
            #refreshToken: refreshToken,
            #accessToken: accessToken,
          },
        ),
        returnValue: _i8.Future<void>.value(),
        returnValueForMissingStub: _i8.Future<void>.value(),
      ) as _i8.Future<void>);

  @override
  _i8.Future<String?> getAccessToken() => (super.noSuchMethod(
        Invocation.method(
          #getAccessToken,
          [],
        ),
        returnValue: _i8.Future<String?>.value(),
      ) as _i8.Future<String?>);

  @override
  _i8.Future<String?> getRefreshToken() => (super.noSuchMethod(
        Invocation.method(
          #getRefreshToken,
          [],
        ),
        returnValue: _i8.Future<String?>.value(),
      ) as _i8.Future<String?>);

  @override
  _i8.Future<void> clearTokens() => (super.noSuchMethod(
        Invocation.method(
          #clearTokens,
          [],
        ),
        returnValue: _i8.Future<void>.value(),
        returnValueForMissingStub: _i8.Future<void>.value(),
      ) as _i8.Future<void>);

  @override
  _i8.Future<bool> doesAccessTokenExist() => (super.noSuchMethod(
        Invocation.method(
          #doesAccessTokenExist,
          [],
        ),
        returnValue: _i8.Future<bool>.value(false),
      ) as _i8.Future<bool>);

  @override
  _i8.Future<bool> refreshToken() => (super.noSuchMethod(
        Invocation.method(
          #refreshToken,
          [],
        ),
        returnValue: _i8.Future<bool>.value(false),
      ) as _i8.Future<bool>);

  @override
  _i8.Future<bool> hasSession() => (super.noSuchMethod(
        Invocation.method(
          #hasSession,
          [],
        ),
        returnValue: _i8.Future<bool>.value(false),
      ) as _i8.Future<bool>);

  @override
  _i8.Future<_i3.Response<Map<String, dynamic>>> fetch(
          _i3.RequestOptions? options) =>
      (super.noSuchMethod(
        Invocation.method(
          #fetch,
          [options],
        ),
        returnValue: _i8.Future<_i3.Response<Map<String, dynamic>>>.value(
            _FakeResponse_1<Map<String, dynamic>>(
          this,
          Invocation.method(
            #fetch,
            [options],
          ),
        )),
      ) as _i8.Future<_i3.Response<Map<String, dynamic>>>);
}

/// A class which mocks [AuthenticationRepository].
///
/// See the documentation for Mockito's code generation for more information.
class MockAuthenticationRepository extends _i1.Mock
    implements _i11.AuthenticationRepository {
  MockAuthenticationRepository() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i8.Future<_i4.Either<_i12.Failure, void>> signInUser({
    required String? email,
    required String? password,
  }) =>
      (super.noSuchMethod(
        Invocation.method(
          #signInUser,
          [],
          {
            #email: email,
            #password: password,
          },
        ),
        returnValue: _i8.Future<_i4.Either<_i12.Failure, void>>.value(
            _FakeEither_2<_i12.Failure, void>(
          this,
          Invocation.method(
            #signInUser,
            [],
            {
              #email: email,
              #password: password,
            },
          ),
        )),
      ) as _i8.Future<_i4.Either<_i12.Failure, void>>);

  @override
  _i8.Future<void> signUpUser({
    required String? email,
    required String? password,
  }) =>
      (super.noSuchMethod(
        Invocation.method(
          #signUpUser,
          [],
          {
            #email: email,
            #password: password,
          },
        ),
        returnValue: _i8.Future<void>.value(),
        returnValueForMissingStub: _i8.Future<void>.value(),
      ) as _i8.Future<void>);

  @override
  _i8.Future<void> logoutUser() => (super.noSuchMethod(
        Invocation.method(
          #logoutUser,
          [],
        ),
        returnValue: _i8.Future<void>.value(),
        returnValueForMissingStub: _i8.Future<void>.value(),
      ) as _i8.Future<void>);
}

/// A class which mocks [HomeApiService].
///
/// See the documentation for Mockito's code generation for more information.
class MockHomeApiService extends _i1.Mock implements _i13.HomeApiService {
  MockHomeApiService() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i8.Future<_i5.User> getSignedUserData() => (super.noSuchMethod(
        Invocation.method(
          #getSignedUserData,
          [],
        ),
        returnValue: _i8.Future<_i5.User>.value(_FakeUser_3(
          this,
          Invocation.method(
            #getSignedUserData,
            [],
          ),
        )),
      ) as _i8.Future<_i5.User>);

  @override
  _i8.Future<List<_i6.BasicPost>> getAllPosts() => (super.noSuchMethod(
        Invocation.method(
          #getAllPosts,
          [],
        ),
        returnValue: _i8.Future<List<_i6.BasicPost>>.value(<_i6.BasicPost>[]),
      ) as _i8.Future<List<_i6.BasicPost>>);

  @override
  _i8.Future<_i6.Post> getPostById(String? id) => (super.noSuchMethod(
        Invocation.method(
          #getPostById,
          [id],
        ),
        returnValue: _i8.Future<_i6.Post>.value(_FakePost_4(
          this,
          Invocation.method(
            #getPostById,
            [id],
          ),
        )),
      ) as _i8.Future<_i6.Post>);

  @override
  _i8.Future<String> createPost(
    String? title,
    String? description,
  ) =>
      (super.noSuchMethod(
        Invocation.method(
          #createPost,
          [
            title,
            description,
          ],
        ),
        returnValue: _i8.Future<String>.value(_i9.dummyValue<String>(
          this,
          Invocation.method(
            #createPost,
            [
              title,
              description,
            ],
          ),
        )),
      ) as _i8.Future<String>);
}

/// A class which mocks [HomeRepositiory].
///
/// See the documentation for Mockito's code generation for more information.
class MockHomeRepositiory extends _i1.Mock implements _i14.HomeRepositiory {
  MockHomeRepositiory() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i8.Future<_i4.Either<_i12.Failure, _i5.User>> getCurrentUserData() =>
      (super.noSuchMethod(
        Invocation.method(
          #getCurrentUserData,
          [],
        ),
        returnValue: _i8.Future<_i4.Either<_i12.Failure, _i5.User>>.value(
            _FakeEither_2<_i12.Failure, _i5.User>(
          this,
          Invocation.method(
            #getCurrentUserData,
            [],
          ),
        )),
      ) as _i8.Future<_i4.Either<_i12.Failure, _i5.User>>);
}
